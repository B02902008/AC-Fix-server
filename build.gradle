import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id 'org.springframework.boot' version '2.3.0.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'jacoco'
	id 'org.sonarqube' version '3.0'
}

group = 'selab.csie.ntu'
version = '1.0'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
    implementation 'org.json:json:+'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	runtime 'com.h2database:h2'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	reports {
		xml.enabled true
	}
}

jar {
	manifest {
		attributes 'Main-Class': 'selab.csie.ntu.autofix.server.AutoFixServerApplication'
	}
}

processResources {
	filesMatching('application.properties') {
		filter ReplaceTokens, tokens: [
				dockerMode: project.hasProperty('docker') ? 'true' : 'flase',
				volumeName: project.hasProperty('docker') ? 'ACFixServerData' : '',
				volumePath: project.hasProperty('docker') ? '/opt/data' : './data',
				serverPort: project.hasProperty('port') ? project.getProperties().get('port') : '8080'
		]
	}
}

task buildDockerImage(type: Exec) {
	workingDir rootProject.projectDir
	commandLine 'docker', 'build', '-t', 'ac-fix/ac-fix-server:1.0', '.'
}

buildDockerImage.dependsOn build
